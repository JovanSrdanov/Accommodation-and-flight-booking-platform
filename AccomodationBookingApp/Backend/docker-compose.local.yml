version: "3.8"

services:

  authorization_db:
    image: authorization_db
    container_name: authorization_db
    restart: on-failure
    build:
      context: ../Database/Authorization
      dockerfile: Dockerfile
    environment:
      PGUSER: ${AUTHORIZATION_DB_USER}
      POSTGRES_PASSWORD: ${AUTHORIZATION_DB_PASS}
      POSTGRES_DB: ${AUTHORIZATION_DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network
    ports:
      - 5001:5432

  authorization_event_db:
    image: mongo
    container_name: authorization_event_db
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - network
    ports:
      - 6001:27017

  user_profile_db:
    image: user_profile_db
    container_name: user_profile_db
    restart: on-failure
    build:
      context: ../Database/UserProfile
      dockerfile: Dockerfile
    environment:
      PGUSER: ${USER_PROFILE_DB_USER}
      POSTGRES_PASSWORD: ${USER_PROFILE_DB_PASS}
      POSTGRES_DB: ${USER_PROFILE_DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network
    ports:
      - 5002:5432

  user_profile_event_db:
    image: mongo
    container_name: user_profile_event_db
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - network
    ports:
      - 6002:27017



  accommodation_db:
    image: mongo
    container_name: ${ACCOMMODATION_SERVICE_DB_NAME}
    volumes:
      - accommodationDb:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - 5003:27017
    networks:
      - network

  accommodation_event_db:
    image: mongo
    container_name: accommodation_event_db
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - network
    ports:
      - 6003:27017

  reservation_db:
    image: mongo
    container_name: ${RESERVATION_SERVICE_DB_NAME}
    volumes:
      - reservationDb:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - 5004:27017
    networks:
      - network

  notification_db:
    image: notification_db
    container_name: notification_db
    restart: on-failure
    build:
      context: ../Database/Notification
      dockerfile: Dockerfile
    environment:
      PGUSER: ${NOTIFICATION_DB_USER}
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASS}
      POSTGRES_DB: ${NOTIFICATION_DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network
    ports:
      - 5005:5432

  notification_event_db:
    image: mongo
    container_name: notification_event_db
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 20s
      timeout: 10s
      retries: 20
      start_period: 10s 
    networks:
      - network
    ports:
      - 6005:27017

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network
    ports:
      - 4000:4222

volumes:
  accommodationDb:
  reservationDb:

networks:
  network:
    external: true
    driver: bridge

