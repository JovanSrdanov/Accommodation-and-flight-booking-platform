version: "3.8"

x-logging: &fluent-bit
  driver: fluentd
  options:
    fluentd-address: ${FLUENT_BIT_ADDRESS}:24224

services:

  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      AUTHORIZATION_SERVICE_HOST: ${AUTHORIZATION_SERVICE_HOST}
      AUTHORIZATION_SERVICE_PORT: ${AUTHORIZATION_SERVICE_PORT}
      USER_PROFILE_SERVICE_HOST: ${USER_PROFILE_SERVICE_HOST}
      USER_PROFILE_SERVICE_PORT: ${USER_PROFILE_SERVICE_PORT}
      ACCOMMODATION_SERVICE_HOST: ${ACCOMMODATION_SERVICE_HOST}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
      RESERVATION_SERVICE_HOST: ${RESERVATION_SERVICE_HOST}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}
      JAEGER_ENDPOINT: ${JAEGER_ENDPOINT}
    networks:
      - network
      - monitoring
    logging: *fluent-bit

  authorization_service:
    image: authorization_service
    container_name: authorization_service
    build:
      context: .
      dockerfile: ./authorization_service/Dockerfile
    restart: on-failure
    environment:
      AUTHORIZATION_DB_HOST: ${AUTHORIZATION_DB_HOST}
      AUTHORIZATION_DB_PORT: ${AUTHORIZATION_DB_PORT}
      AUTHORIZATION_DB_USER: ${AUTHORIZATION_DB_USER}
      AUTHORIZATION_DB_PASS: ${AUTHORIZATION_DB_PASS}
      AUTHORIZATION_DB_NAME: ${AUTHORIZATION_DB_NAME}
      AUTHORIZATION_SERVICE_PORT: ${AUTHORIZATION_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      DELETE_USER_COMMAND_SUBJECT: ${DELETE_USER_COMMAND_SUBJECT}
      DELETE_USER_REPLY_SUBJECT: ${DELETE_USER_REPLY_SUBJECT}
      JAEGER_ENDPOINT: ${JAEGER_ENDPOINT}
    depends_on:
      authorization_db:
          condition: service_healthy
    networks:
      - network
      - monitoring
    logging: *fluent-bit

  authorization_db:
    image: authorization_db
    container_name: authorization_db
    restart: on-failure
    build:
      context: ../Database/Authorization
      dockerfile: Dockerfile
    environment:
      PGUSER: ${AUTHORIZATION_DB_USER}
      POSTGRES_PASSWORD: ${AUTHORIZATION_DB_PASS}
      POSTGRES_DB: ${AUTHORIZATION_DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network
      - monitoring
    ports:
      - 5001:5432
    logging: *fluent-bit

  user_profile_service:
    image: user_profile_service
    container_name: user_profile_service
    build:
      context: .
      dockerfile: ./user_profile_service/Dockerfile
    restart: on-failure
    environment:
      USER_PROFILE_DB_HOST: ${USER_PROFILE_DB_HOST}
      USER_PROFILE_DB_PORT: ${USER_PROFILE_DB_PORT}
      USER_PROFILE_DB_NAME: ${USER_PROFILE_DB_NAME}
      USER_PROFILE_DB_USER: ${USER_PROFILE_DB_USER}
      USER_PROFILE_DB_PASS: ${USER_PROFILE_DB_PASS}

      USER_PROFILE_EVENT_DB_NAME: ${USER_PROFILE_EVENT_DB_NAME}
      USER_PROFILE_EVENT_DB_PORT: ${USER_PROFILE_EVENT_DB_PORT}
      USER_PROFILE_EVENT_INNER_DB_NAME: ${USER_PROFILE_EVENT_INNER_DB_NAME}
      USER_PROFILE_EVENT_DB_COLLECTION_NAME: ${USER_PROFILE_EVENT_DB_COLLECTION_NAME}

      USER_PROFILE_SERVICE_PORT: ${USER_PROFILE_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      DELETE_USER_COMMAND_SUBJECT: ${DELETE_USER_COMMAND_SUBJECT}
      DELETE_USER_REPLY_SUBJECT: ${DELETE_USER_REPLY_SUBJECT}
      AUTHORIZATION_SERVICE_HOST: ${AUTHORIZATION_SERVICE_HOST}
      AUTHORIZATION_SERVICE_PORT: ${AUTHORIZATION_SERVICE_PORT}
      RESERVATION_SERVICE_HOST: ${RESERVATION_SERVICE_HOST}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}
      ACCOMMODATION_SERVICE_HOST: ${ACCOMMODATION_SERVICE_HOST}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
      JAEGER_ENDPOINT: ${JAEGER_ENDPOINT}
    depends_on:
      user_profile_db:
        condition: service_healthy
    networks:
      - network
      - monitoring
    logging: *fluent-bit



  user_profile_db:
    image: user_profile_db
    container_name: user_profile_db
    restart: on-failure
    build:
      context: ../Database/UserProfile
      dockerfile: Dockerfile
    environment:
      PGUSER: ${USER_PROFILE_DB_USER}
      POSTGRES_PASSWORD: ${USER_PROFILE_DB_PASS}
      POSTGRES_DB: ${USER_PROFILE_DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network
      - monitoring
    ports:
      - 5002:5432
    logging: *fluent-bit

  user_profile_event_db:
    image: mongo
    container_name: user_profile_event_db
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - network
      - monitoring
    ports:
      - 5003:27017
    logging: *fluent-bit


  accommodation_service:
    image: accommodation_service
    container_name: accommodation_service
    build:
      context: .
      dockerfile: ./accommodation_service/Dockerfile
    restart: on-failure
    environment:
      ACCOMMODATION_SERVICE_HOST: ${ACCOMMODATION_SERVICE_HOST}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
      ACCOMMODATION_SERVICE_DB_NAME: ${ACCOMMODATION_SERVICE_DB_NAME}
      ACCOMMODATION_SERVICE_DB_PORT: ${ACCOMMODATION_SERVICE_DB_PORT}
      RESERVATION_SERVICE_HOST: ${RESERVATION_SERVICE_HOST}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}
      JAEGER_ENDPOINT: ${JAEGER_ENDPOINT}
    networks:
      - network
      - monitoring
    depends_on:
      accommodation_db:
        condition: service_healthy
    logging: *fluent-bit

  accommodation_db:
    image: mongo
    container_name: ${ACCOMMODATION_SERVICE_DB_NAME}
    volumes:
      - accommodationDb:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - 6969:27017
    networks:
      - network
      - monitoring
    logging: *fluent-bit

  reservation_service:
    image: reservation_service
    container_name: reservation_service
    build:
      context: .
      dockerfile: ./reservation_service/Dockerfile
    restart: on-failure
    environment:
      RESERVATION_SERVICE_HOST: ${RESERVATION_SERVICE_HOST}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}
      RESERVATION_SERVICE_DB_NAME: ${RESERVATION_SERVICE_DB_NAME}
      RESERVATION_SERVICE_DB_PORT: ${RESERVATION_SERVICE_DB_PORT}
      JAEGER_ENDPOINT: ${JAEGER_ENDPOINT}
    networks:
      - network
      - monitoring
    depends_on:
      reservation_db:
        condition: service_healthy
    logging: *fluent-bit

  reservation_db:
    image: mongo
    container_name: ${RESERVATION_SERVICE_DB_NAME}
    volumes:
      - reservationDb:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - 6968:27017
    networks:
      - network
      - monitoring
    logging: *fluent-bit

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network
      - monitoring
    logging: *fluent-bit

volumes:
  accommodationDb:
  reservationDb:

networks:
  network:
    driver: bridge
  monitoring:
    external: true
