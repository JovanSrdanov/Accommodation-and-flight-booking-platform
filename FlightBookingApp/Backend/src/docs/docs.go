// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/airport": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Airport"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Airport"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.SimpleResponse"
                        }
                    }
                }
            }
        },
        "/airport/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Airport"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Airport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Airport"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.SimpleResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.SimpleResponse"
                        }
                    }
                }
            }
        },
        "/flight": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Flight"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Flight"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.SimpleResponse"
                        }
                    }
                }
            },
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Flight"
                ],
                "parameters": [
                    {
                        "description": "Flight",
                        "name": "flight",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Flight"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.SimpleResponse"
                        }
                    }
                }
            }
        },
        "/flight/search": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Flight"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "DepartureDateTime (date) of desired departure, must be in this format YYYY-MM-DD",
                        "name": "time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Destination country",
                        "name": "destinationCountry",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Destination city",
                        "name": "destinationCity",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Starting point country",
                        "name": "startPointCountry",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Starting point  city",
                        "name": "startPointCity",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Desired Number Of Seats",
                        "name": "desiredNumberOfSeats",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page number",
                        "name": "pageNumber",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Results Per Page",
                        "name": "resultsPerPage",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Sort Direction",
                        "name": "sortDirection",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Sort Type",
                        "name": "sortType",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Page"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.SimpleResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.SimpleResponse"
                        }
                    }
                }
            }
        },
        "/flight/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Flight"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Flight ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Flight"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.SimpleResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.SimpleResponse"
                        }
                    }
                }
            },
            "patch": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Flight"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Flight ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SimpleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.SimpleResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.SimpleResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreatedResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "dto.SimpleResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Address": {
            "type": "object",
            "required": [
                "city",
                "country",
                "street",
                "streetNumber"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "streetNumber": {
                    "type": "string"
                }
            }
        },
        "model.Airport": {
            "type": "object",
            "required": [
                "address",
                "name"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/model.Address"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Flight": {
            "type": "object",
            "required": [
                "destination",
                "numberOfSeats",
                "price",
                "startPoint",
                "time"
            ],
            "properties": {
                "canceled": {
                    "type": "boolean"
                },
                "destination": {
                    "$ref": "#/definitions/model.Airport"
                },
                "id": {
                    "type": "string"
                },
                "numberOfSeats": {
                    "type": "integer",
                    "minimum": 0
                },
                "price": {
                    "type": "number",
                    "minimum": 0
                },
                "startPoint": {
                    "$ref": "#/definitions/model.Airport"
                },
                "time": {
                    "description": "TODO namestiti da smesta UTC\nTODO Aleksandar (Jovan napisao) , validacija na time, destination i price, ddd na decrease i increase , ne sme da ima negativno dostupnih mesta",
                    "type": "string"
                },
                "vacantSeats": {
                    "type": "integer"
                }
            }
        },
        "utils.Page": {
            "type": "object",
            "properties": {
                "data": {},
                "entityCount": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "bearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
