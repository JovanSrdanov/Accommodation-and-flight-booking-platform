definitions:
  dto.AccountRegistration:
    properties:
      address:
        $ref: '#/definitions/model.Address'
      email:
        type: string
      name:
        type: string
      password:
        type: string
      surname:
        type: string
      username:
        type: string
    required:
    - address
    - name
    - password
    - surname
    - username
    type: object
  dto.BuyTicketDto:
    properties:
      numberOfTickets:
        type: integer
      ticket:
        $ref: '#/definitions/model.Ticket'
    required:
    - numberOfTickets
    - ticket
    type: object
  dto.CreatedResponse:
    properties:
      id:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.SimpleResponse:
    properties:
      message:
        type: string
    type: object
  dto.UserInfo:
    properties:
      address:
        $ref: '#/definitions/model.Address'
      name:
        type: string
      surname:
        type: string
    required:
    - address
    - name
    - surname
    type: object
  model.Account:
    properties:
      email:
        description: Email verification
        type: string
      emailVerificationHash:
        type: string
      id:
        type: string
      isActivated:
        type: boolean
      password:
        minLength: 6
        type: string
      refreshToken:
        description: Tokens
        type: string
      role:
        $ref: '#/definitions/model.Role'
      userId:
        type: string
      username:
        type: string
      verificationTimeout:
        type: string
    required:
    - email
    - isActivated
    - password
    - username
    type: object
  model.Address:
    properties:
      city:
        type: string
      country:
        type: string
      street:
        type: string
      streetNumber:
        type: string
    required:
    - city
    - country
    - street
    - streetNumber
    type: object
  model.Airport:
    properties:
      address:
        $ref: '#/definitions/model.Address'
      id:
        type: string
      name:
        type: string
    required:
    - address
    - name
    type: object
  model.Flight:
    properties:
      canceled:
        type: boolean
      departureDateTime:
        description: TODO namestiti da smesta UTC
        type: string
      destination:
        $ref: '#/definitions/model.Airport'
      id:
        type: string
      numberOfSeats:
        minimum: 0
        type: integer
      price:
        minimum: 0
        type: number
      startPoint:
        $ref: '#/definitions/model.Airport'
      vacantSeats:
        type: integer
    required:
    - departureDateTime
    - destination
    - numberOfSeats
    - price
    - startPoint
    type: object
  model.Role:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - ADMIN
    - REGULAR_USER
  model.Ticket:
    properties:
      buyer:
        type: string
      flightId:
        type: string
      id:
        type: string
      owner:
        type: string
    required:
    - flightId
    type: object
  model.User:
    properties:
      address:
        $ref: '#/definitions/model.Address'
      id:
        type: string
      name:
        type: string
      surname:
        type: string
    required:
    - address
    - name
    - surname
    type: object
  utils.Page:
    properties:
      data: {}
      entityCount:
        type: integer
    type: object
info:
  contact: {}
paths:
  /account:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Account'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Account
  /account/{id}:
    delete:
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Account
  /account/emailver/{username}/{verPass}:
    get:
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Email verification password
        in: path
        name: verPass
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Account
  /account/login:
    post:
      parameters:
      - description: Login data
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Account
  /account/refresh-token/{token}:
    get:
      parameters:
      - description: Refresh token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Invalid refresh token
          schema:
            type: string
        "500":
          description: Error while generating the token
          schema:
            type: string
      tags:
      - Account
  /account/register:
    post:
      parameters:
      - description: Registration info
        in: body
        name: registrationInfo
        required: true
        schema:
          $ref: '#/definitions/dto.AccountRegistration'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Account
  /airport:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Airport'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Airport
  /airport/{id}:
    get:
      parameters:
      - description: Airport ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Airport'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Airport
  /flight:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Flight'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Flight
    post:
      parameters:
      - description: Flight
        in: body
        name: flight
        required: true
        schema:
          $ref: '#/definitions/model.Flight'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Flight
  /flight/{id}:
    get:
      parameters:
      - description: Flight ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Flight'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Flight
    patch:
      parameters:
      - description: Flight ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Flight
  /flight/search:
    get:
      parameters:
      - description: Departure date, must be in this format YYYY-MM-DD
        format: yyyy-mm-dd
        in: query
        name: departureDate
        required: true
        type: string
      - description: Destination country
        in: query
        name: destinationCountry
        required: true
        type: string
      - description: Destination city
        in: query
        name: destinationCity
        required: true
        type: string
      - description: Starting point country
        in: query
        name: startPointCountry
        required: true
        type: string
      - description: Starting point  city
        in: query
        name: startPointCity
        required: true
        type: string
      - description: Desired number of seats
        in: query
        name: desiredNumberOfSeats
        required: true
        type: integer
      - description: Page number
        in: query
        name: pageNumber
        required: true
        type: integer
      - description: Results per page
        in: query
        name: resultsPerPage
        required: true
        type: integer
      - description: Sort direction (asc, dsc, no_sort)
        in: query
        name: sortDirection
        required: true
        type: string
      - description: Sort type, it can be departureDateTime or price
        in: query
        name: sortType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/utils.Page'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Flight
  /ticket:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Ticket'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Ticket
    post:
      parameters:
      - description: Ticket
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/model.Ticket'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Ticket
  /ticket/{id}:
    delete:
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Ticket
    get:
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Ticket'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Ticket
  /ticket/buy:
    post:
      parameters:
      - description: BuyTicketDto
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/dto.BuyTicketDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Ticket
  /ticket/myTickets:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Ticket'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - Ticket
  /user:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - User
    post:
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - User
  /user/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - User
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.SimpleResponse'
      tags:
      - User
  /user/logged-in:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserInfo'
        "500":
          description: can't find your account info
          schema:
            type: string
      tags:
      - User
securityDefinitions:
  bearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
