version: "3.1"

services:
  flights-app:
    image: flights-app
    build:
      context: ./Backend
      dockerfile: Dockerfile
    restart: always
    container_name: "flights-app"
    ports:
      - 4200:4200
    environment:
      - PORT=${PORT}
      - MONGO_DB_URI=${MONGO_DB_URI}
      - CON_POOL_MIN_POOL_SIZE=${CON_POOL_MIN_POOL_SIZE}
      - CON_POOL_MAX_POOL_SIZE=${CON_POOL_MAX_POOL_SIZE}
      - CONNECTION_POOL_MONITORING=${CONNECTION_POOL_MONITORING}
      - GRACEFUL_SHUTDOWN_TIMEOUT=${GRACEFUL_SHUTDOWN_TIMEOUT}
      #Auth
      - ACCESS_SECRET_KEY=${ACCESS_SECRET_KEY}
      - REFRESH_SECRET_KEY=${REFRESH_SECRET_KEY}
      - SENDER_EMAIL=${SENDER_EMAIL}@gmail.com
      - SENDER_APP_PASSWORD=${SENDER_APP_PASSWORD}
    depends_on:
        mongo:
            condition: service_healthy
    networks:
      - network
         
  # NoSQL: MongoDB
  mongo:
    image: mongo
    restart: always
    container_name: "flights-db"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - flightsAppDB:/data/db
    networks:
      - network
    ports:
      - 5000:27017

  #MongoDB seeding container
  mongo-seed:
    image: "mongo-seed"
    container_name: "mongo-seed"
    build:
      context: ./MongoSeed
      dockerfile: Dockerfile
    depends_on:
      - mongo
    networks:
      - network

volumes:
  flightsAppDB:

networks:
  network:
    external: true
    driver: bridge


